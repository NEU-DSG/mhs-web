{% extends "base.njk" %}

{% block head %}
    <title>PSC Lab Space {{person}} Subject Timeline</title>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/5.9.0/d3.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
    <script src="../../../JsScripts/timeline.cjs" type="text/javascript"></script>
    <link rel="stylesheet" href="../../../styles/tabs-style.css"></link>
    <link rel="stylesheet" href="../../../styles/timeline.css"></link>
    <link rel="stylesheet" href="../../../styles/global.css"></link>
{% endblock %}

{% block content %}
    <div class="main-body">
        <h1 class="subtitle">{{ person }}
            {{built.Btitles["timeline"]}}</h3>

        <div class="button-container">
            <button class="button-1" role="button" onclick="window.location.href='/projects/{{initials}}/index.html';">Back to
				{{initials}}</button>
            <button class="button-1" role="button" onclick="window.location.href='/tools/timeline/index.html';">Back to Timeline
				Charts</button>
        </div>
        <br>

        {% if initials %}

            <p>Below is a topic timeline, plotted by year and when that topic appears in the works of the respective author.
		Editors of the XML would assign topics to each diary entry or letter, and these were all accumulated and then
		grouped together by year. Topics are all under a topic umbrella assigned by the MHS, you can collapse or expand
		topics under their umbrella. Each topic, topic umbrella, and appearance of the topic on the timeline chart can
		be clicked to bring you to the Primary Source Cooperative website.</p><br>

            <div class="menu__item item-active vis-container">
                <br>
                <div id="centered-div">
                    <button class="button-1 collapse-btn" id="collapseAllButton" onclick="collapseAll()">Collapse All</button>
                    <button class="button-1 expand-btn" id="expandAllButton" onclick="expandAll()">Expand All</button>
                </div>
                <br>
                <div id="chart"></div>
            </div>

            <script>
                // Load the CSV file asynchronously
                d3
                    .csv("../../../data/{{initials}}/timeline/sortedtimeline.csv", function (row) {
                        return {
                            role: row.Role,
                            name: row.Name,
                            start: new Date(row.Start),
                            end: new Date(row.End),
                            count: parseInt(row.Count)
                        };
                    })
                    .then(function (data) {
                        // Transform the data into the format needed by the timeline
                        const transformedData = transformData(data);

                        // After the data is transformed, draw the chart
                        drawChart(transformedData, "../../../data/{{initials}}/timeline/sortedcolors.csv");

                        // window resize listener
                        window.addEventListener("resize", () => {
                            clearTimeout(window.resizedFinished);
                            window.resizedFinished = setTimeout(() => {
                                drawChart(transformedData, "../../../data/{{initials}}/timeline/sortedcolors.csv");
                            }, 200);
                        });
                    })
                    .catch(function (error) {
                        console.error("Error loading the CSV file:", error);
                    });
                // Function to create the timeline chart
                function drawChart(data, colors) {

                    d3
                        .text(colors)
                        .then(function (csvText) {
                            // Split the text by commas to get an array of color values wrapped in double quotes
                            let colorsArray = csvText
                                .trim()
                                .split(",");

                            // Remove the chart if it already exists (for re-renders)
                            d3.select("#chart").selectAll("*").remove();

                            // Remove the double quotes around each color value, while keeping them as strings
                            colorsArray = colorsArray.map(color => color.trim().replace(/^"|"$/g, ''));

                            // Apply the colors to your chart dynamically
                            const chart = d3
                                .timeline("{{initials | lower}}")
                                .duration(500);
                            chart.colors(colorsArray);

                            // Select the div with id 'chart' and apply the data to it
                            d3
                                .selectAll('#chart')
                                .datum(data)
                                .call(chart);

                            requestAnimationFrame(() => {
                                const path = document.querySelector('path[stroke-width="1.75"]');
                                if (path) {
                                    const dAttribute = path.getAttribute('d');
                                    const xCoordinate = parseFloat(dAttribute.split(',')[0].replace('M', ''));
                                    const halfX = xCoordinate / 2;

                                    const div = document.getElementById('centered-div');

                                    // Ensure only visible content is measured
                                    div.style.display = 'inline-block';
                                    const divRect = div.getBoundingClientRect();

                                    // Calculate margin-left for centering
                                    const marginLeft = halfX - divRect.width / 2;

                                    // Apply the calculated position
                                    div.style.position = 'absolute';
                                    div.style.marginLeft = `${marginLeft}px`;
                                } else {
                                    console.error("Path with stroke-width='1.75' not found");
                                }
                            });
                        });
                }

                // Function to transform the CSV data into the format needed for the timeline
                function transformData(data) {
                    return data.map(d => [
                        d.role,
                        d.name,
                        new Date(d.start),
                        new Date(d.end),
                        parseInt(d.count)
                    ]);
                }
          </script>

        {% else %}
            <p> No Subject Timeline Chart found for this person. </p>

        {% endif %}
    </div>
{% endblock %}