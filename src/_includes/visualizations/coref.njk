{% extends "base.njk" %}

{% block head %}
    <title>PSC Lab Space {{person}} Co-Refs</title>
    <link rel="stylesheet" href="../../../styles/d3-dark.css"></link>
    <link rel="stylesheet" href="../../../styles/slider_styles.css"></link>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="stylesheet" href="../../../styles/tabs-style.css">

    <!-- Holds the code for the modular sliders-->
    <script src="../../../JsScripts/multiselect-dropdown.js"></script>
    <script src="../../../JsScripts/CreateSliders.js"></script>

    <!-- Holds the code for the network viz-->

    <script type="text/javascript" src="../../../JsScripts/coRef.js"></script>

    <script src="https://d3js.org/d3.v7.min.js"></script>
{% endblock %}

{% block content %}

    <div style="width: 65%;" class="main-body">

        <!-- This is a tab based navigation system. You can add new tabs following this method-->

        <h3 class="subtitle">{{person}} Co-reference Network Map</h3>

        <div style="position: absolute; left: 50%; transform: translateX(-50%); margin-top: 10px; margin-bottom: 40px;">
            <button class="button-1" role="button" onclick="window.location.href='/projects/{{initials}}';">Back to {{initials}}</button>
            <button class="button-1" role="button" onclick="window.location.href='/tools/coref';">Back to Network
                Maps</button>
        </div>
        <br>
        <div class="tab-menu">

            <ul class="menu__tabs">

                <!--Marked active here because it is the default-->
                <li>
                    <a class="active" href="#item-1">
                        <i class="fa-solid fa-circle-info"></i>
                        <span>About</span></a>
                </li>

                <!-- Loop through additional tabs -->
                {% for tab in tabs %}
                    <li>
                        <a href="#item-{{ tab.number }}">
                            <i class="fa-solid {{ tab.icon }}"></i>
                            <span>{{ tab.short_title }}</span>
                        </a>
                    </li>
                {% endfor %}
            </ul>

    </ul>

    <!--ABove held the tabs, below here holds their contents. THe graphs will be drawn here -->
    <section class="menu--wrapper">

        <article id="item-1" class="menu__item item-active">
            <br>
            <h3 class="subtitle">About</h3>

            <div class="about-holder">

                <p style="padding-left: 5%; padding-right: 5%;">
                            Network visualizations showcase the interconnectivity between different entities.
                            Here, they show the co-references of people mentioned in John Quincy Adamsâ€™ diaries.
                        </p>
                <br>
                <ul style="padding-left: 5%; padding-right: 5%;">
                    <li>
                        <span>Node:</span> The circles, each representing a different person.
                            </li>
                    <li>
                        <span>Edge:</span> The lines, each representing a connection between two people.
                            </li>
                    <li>
                        <span>Degree:</span> Counts the number of edges connected to a node.
                                A node with more connections will appear larger in the visualization.
                            </li>
                    <li>
                        <span>Modularity/Community:</span> Groups nodes into distinct communities
                                based on the strength of their connections with one another. Nodes within the
                                same community are more interconnected, and each community is represented by
                                a unique color.
                            </li>
                    <li>
                        <span>Betweenness:</span> A measure of importance. Specifically, this measures
                                how important a node is for connecting other nodes, by capturing how often a
                                node is on the shortest path between other nodes.
                            </li>
                    <li>
                        <span>Eigenvector:</span> A measure of importance. Specifically, it both counts
                                the number of connections a node has and also how well-connected its connections are.
                                A node scores higher if it links to other nodes that themselves have many connections.
                            </li>
                </ul>

                <br><br>

            </div>
            <!--The graph will go inside of this div. This is replicated for all tabs that have possbilities for a graph-->
            <div id="G-1" class="Chart-Holder"></div>
            <br><br>

        </article>

        {% for tab in tabs %}
            <article id="item-{{ tab.number }}" class="menu__item">
                <br>
                <h3 class="subtitle">{{ tab.title }}</h3>
                <h4 style="text-align: center;">
                    <i>{{ tab.date }}</i>
                </h4>
                <br>
                <p style="padding-left: 5%; padding-right: 5%;">{{ tab.desc }}</p>
                <br><br>
                <div id="G-{{ tab.number }}" class="Chart-Holder"></div>
                <br><br>
            </article>
        {% endfor %}

    </section>

    <!--  Filters! -->
    <br>

    <!-- Hides the filters by default (because the first tab is the about tab and there is nothing to filter)-->
    <div id="FiltersandTitle">

        <div class="Filter-Title">
            <br>
            <h2 style="color: #7a7369;" class="subtitle">Filters</h2>
        </div>

        <div id="contains"
                    style="background-color: #fff; margin: 0px; padding: 10px; display: flex; align-items: center;">

            <div id="first">
                <input type="checkbox" id="filterCheckbox" name="filterCheckbox"
                            style="transform: scale(1.5); margin-right: 10px;">
                <label for="filterCheckbox" style="color: #7a7369; font-size: 16px;">Show Neighbor Nodes Outside
                            of Filter Parameters on Hover</label>
            </div>

            <!-- The spacer div will push the second div to 25% of the width -->
            <div style="flex-grow: 1;"></div>

            <div style="color: #7a7369;" id="second">
                <label for="site-search">Search for person by name:</label>
                <input type="search" id="site-search" name="q"/>
                <button onclick="Searched()">Search</button>
            </div>

        </div>

        <div class="Filter-Container" id="Filter-Container">

            <!--There is a modular filter builder, this uses the CreateSliders.js file to build filters-->

            <div class="child">

                <h3 style="color: #7a7369;">Community Filter</h3>

                <div class="slider" style="color: #7a7369;">

                    <select name="comms" id="comms" multiple multiple multiselect-search="true"
                                multiselect-select-all="true">

                        <!-- Holds a bunch of different options for community. This could maybe be done better?-->
                        <option value="0.0">0</option>
                        <option value="1.0">1</option>
                        <option value="2.0">2</option>
                        <option value="3.0">3</option>
                        <option value="4.0">4</option>
                        <option value="5.0">5</option>
                        <option value="6.0">6</option>
                        <option value="7.0">7</option>
                        <option value="8.0">8</option>
                        <option value="9.0">9</option>
                        <option value="10.0">10</option>
                        <option value="11.0">11</option>
                        <option value="12.0">12</option>
                        <option value="13.0">13</option>
                        <option value="14.0">14</option>
                        <option value="15.0">15</option>
                        <option value="16.0">16</option>
                        <option value="17.0">17</option>
                        <option value="18.0">18</option>
                        <option value="19.0">19</option>
                        <option value="20.0">20</option>

                    </select>

                </div>

            </div>

            <script>
                CreateSlider('degree', 1, 'Filter-Container', 1);
                CreateSlider('betweenness', .01, 'Filter-Container', .05);
                CreateSlider('eigenvector', .01, 'Filter-Container', .05);
            </script>

        </div>
    </div>

</div>
<script src='https://code.jquery.com/jquery.min.js'></script>
<script type="text/javascript">
    $(function () {
        var $menu_tabs = $('.menu__tabs li a');

        // This maps a tab to its data file

        var graphMapping = {
            "item-1": "example.json", // Always include item-1{% for tab in tabs %}
            "item-{{ tab.number }}": "{{ tab.data_file }}"{% if not loop.last %},{% endif %}
        {% endfor %}
    };

    loadGraph("example.json", "G-1");
    // when a tab is clicked..
    $menu_tabs.on("click", function (e) {
        e.preventDefault();

        // Sets the slider progress bars back to their default lenghts
        $('.slider .range-slider .progress').css({'left': '0%', 'right': '0%'});

        // The ID of the tab that has been clicked on
        var targetArticleID = this.hash;

        // Remove 'active' class from all tabs
        $menu_tabs.removeClass('active');
        $(this).addClass('active'); // Add active class to clicked tab

        // The active tab href code (ie item-1)
        var active_tab = this
            .href
            .toString()
            .substring(this.href.toString().indexOf("#") + 1);

        // Clear all graphs from all tabs before rendering the new one
        clearAllGraphs();

        // Fade out current visible articles
        $('.menu__item.item-active').fadeOut(0, function () {
            // After fadeOut completes, remove 'item-active' from the old article
            $(this).removeClass('item-active');

            $(targetArticleID)
                .hide()
                .addClass('item-active')
                .fadeIn(0); // Fade in new article after class is added
        });

        // Check if the tab has a corresponding data script
        if (graphMapping[active_tab]) {
            loadGraph(graphMapping[active_tab], "G-" + active_tab.split("-")[1]);
            //Load the corresponding graph into the correct container

        }

    });

    // Function to clear all graphs from all containers
    function clearAllGraphs() {
        $('.network').remove();
        // Clear any existing graph content inside all graph containers

    }

    // General function to load the corresponding graph script into the specific container
    async function loadGraph(graphScript, containerID) {

        // Create new network div
        var div_string = '<div style="width: 100%;" class="network"></div>';

        // Insert the div into the container with the provided containerID. Th
        $(div_string).appendTo(document.getElementById(containerID));

        // Insert the graph
        await graph("../../../data/{{initials}}/coref/" + graphScript);
        Searched()
        document
            .getElementById("comms")
            .loadOptions();

    }
});
</script>
</div>

{% endblock %}