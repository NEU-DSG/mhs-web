{% extends "base.njk" %}

{% block head %}
    <title>PSC Lab Space {{ person }} Co-Refs</title>
    <link rel="stylesheet" href="../../../styles/d3-dark.css"></link>
    <link rel="stylesheet" href="/styles/global.css">
    <link rel="stylesheet" href="/styles/coref.css">
    <link rel="stylesheet" href="../../../styles/slider_styles.css"></link>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="stylesheet" href="../../../styles/tabs-style.css">

    <!-- Holds the code for the modular sliders-->
    <script src="../../../JsScripts/multiselect-dropdown.js"></script>
    <script src="../../../JsScripts/CreateSliders.js"></script>

    <!-- Holds the code for the network viz-->
    <script type="text/javascript" src="../../../JsScripts/coRef.js"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
{% endblock %}

{% block content %}
    <div class="main-body">

        <h1 class="subtitle">{{ person }}
            {{built.Btitles["coref"]}}</h3>

        <div class="button-container">
            <button class="button-1" role="button" onclick="window.location.href='/projects/{{ initials }}/index.html';">Back to {{ initials }}</button>
            <button class="button-1" role="button" onclick="window.location.href='/tools/coref/index.html';">Back to Network Maps</button>
        </div>
        <br>

        <!-- Tab Menu -->
        <div class="tab-menu">
            <ul class="menu__tabs">
                <!-- Default About Tab -->
                <li>
                    <a class="active" href="#item-1">
                        <i class="fa-solid fa-circle-info"></i>
                        <span>About</span>
                    </a>
                </li>

                <!-- Loop through the tabs defined in custom_params -->
                {% for tab in subpage.params.tabs %}
                    <li>
                        <a href="#item-{{ tab.number }}">
                            <i class="fa-solid {{ tab.icon }}"></i>
                            <span>{{ tab.short_title }}</span>
                        </a>
                    </li>
                {% endfor %}
            </ul>
        </div>

        <!-- Tab Content -->
        <section class="menu--wrapper">
            <!-- About Section -->
            <article id="item-1" class="menu__item item-active">
                <br>
                <h2 class="subtitle">About</h3>

                <div class="about-holder">
                    <p class="about-text">
                        Network visualizations showcase the interconnectivity between different entities.
                        Here, they show the co-references of people mentioned in {{ person }}â€™s diaries.
                    </p>
                    <br>
                    <ul class="legend-list">
                        <li>
                            <span>Node:</span> The circles, each representing a different person.</li>
                        <li>
                            <span>Edge:</span> The lines, each representing a connection between two people.</li>
                        <li>
                            <span>Degree:</span> Counts the number of edges connected to a node. A node with more connections will appear larger in the visualization.</li>
                        <li>
                            <span>Modularity/Community:</span> Groups nodes into distinct communities based on the strength of their connections. Nodes within the same community are more interconnected, and each community is represented by a unique color.</li>
                        <li>
                            <span>Betweenness:</span> A measure of importance, indicating how often a node is on the shortest path between other nodes.</li>
                        <li>
                            <span>Eigenvector:</span> A measure of importance considering the number of connections a node has and how well-connected its connections are.</li>
                    </ul>
                    <br><br>
                </div>
                <div id="G-1" class="Chart-Holder"></div>
                <br><br>
            </article>

            <!-- Loop through each tab and create content -->
            {% for tab in subpage.params.tabs %}
                <article id="item-{{ tab.number }}" class="menu__item">
                    <br>
                    <h3 class="subtitle">{{ tab.title }}</h3>
                    <h4 class="tab-date">
                        <i>{{ tab.date }}</i>
                    </h4>
                    <br>
                    <p class="tabs">{{ tab.desc }}</p>
                    <br><br>
                    <div id="G-{{ tab.number }}" class="Chart-Holder"></div>
                    <br><br>
                </article>
            {% endfor %}
        </section>

        <!-- Filters Section -->
        <br>
        <div id="FiltersandTitle">
            <div class="Filter-Title">
                <br>
                <h2 class="subtitle">Filters</h2>
            </div>

            <div id="contains" class="filter-1">
                <div id="first">
                    <input type="checkbox" id="filterCheckbox" name="filterCheckbox" class="filter-checkbox">
                    <label for="filterCheckbox" class="checkbox-label">Show Neighbor Nodes Outside of Filter Parameters on Hover</label>
                </div>

                <!-- Spacer Div -->
                <div class="spacer"></div>

                <div id="second">
                    <label for="site-search">Search for person by name:</label>
                    <input type="search" id="site-search" name="q" onkeydown="if(event.key === 'Enter') Searched();"/>
                    <button class="search-button" onclick="Searched()">Search</button>
                </div>
            </div>

            <div class="Filter-Container" id="Filter-Container">
                <!-- Modular Slider Builder -->
                <div class="child">
                    <h3>Community Filter</h3>
                    <div class="slider">
                        <select name="comms" id="comms" multiple multiselect-search="true" multiselect-select-all="true">
                            <h3>Community Levels</h3>
                            <!-- Options for Community Filter -->
                            {% for i in range(0, 21) %}
                                <label for="option">{{ i }}</label>
                                <option id="option" class="option" value="{{ i }}.0">{{ i }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>
                <script>
                    CreateSlider('degree', 1, 'Filter-Container', 1);
                    CreateSlider('betweenness', .01, 'Filter-Container', .05);
                    CreateSlider('eigenvector', .01, 'Filter-Container', .05);
                </script>
            </div>
        </div>
    </div>

    <script src='https://code.jquery.com/jquery.min.js'></script>
    <script type="text/javascript">
        $(function () {
            var $menu_tabs = $('.menu__tabs li a');

            // This maps a tab to its data file
            var graphMapping = {
                "item-1": "example.json", // Always include item-1{% for tab in subpage.params.tabs %}
                "item-{{ tab.number }}": "{{ tab.data_file }}"{% if not loop.last %},{% endif %}
            {% endfor %}
        };

        loadGraph("example.json", "G-1");

        // Tab click event
        $menu_tabs.on("click", function (e) {
            e.preventDefault();

            // Reset slider progress bars
            $('.slider .range-slider .progress').css({'left': '0%', 'right': '0%'});

            var targetArticleID = this.hash;

            $menu_tabs.removeClass('active');
            $(this).addClass('active');

            var active_tab = this
                .href
                .toString()
                .substring(this.href.toString().indexOf("#") + 1);

            clearAllGraphs();

            $('.menu__item.item-active').fadeOut(0, function () {
                $(this).removeClass('item-active');
                $(targetArticleID)
                    .hide()
                    .addClass('item-active')
                    .fadeIn(0);
            });

            if (graphMapping[active_tab]) {
                loadGraph(graphMapping[active_tab], "G-" + active_tab.split("-")[1]);
            }
        });

        function clearAllGraphs() {
            $('.network').remove();
        }

        async function loadGraph(graphScript, containerID) {
            var div_string = '<div class="network"></div>';
            $(div_string).appendTo(document.getElementById(containerID));
            await graph("../../../data/{{ initials }}/coref/" + graphScript);
            Searched();
            document
                .getElementById("comms")
                .loadOptions();
        }
    });
    </script>
{% endblock %}